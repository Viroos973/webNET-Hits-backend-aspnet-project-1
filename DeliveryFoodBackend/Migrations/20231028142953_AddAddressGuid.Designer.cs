// <auto-generated />
using System;
using DeliveryFoodBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DeliveryFoodBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231028142953_AddAddressGuid")]
    partial class AddAddressGuid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.AsAddrObj", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор записи. Ключевое поле");

                    b.Property<long?>("Changeid")
                        .HasColumnType("bigint")
                        .HasColumnName("changeid")
                        .HasComment("ID изменившей транзакции");

                    b.Property<DateOnly?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate")
                        .HasComment("Окончание действия записи");

                    b.Property<int?>("Isactive")
                        .HasColumnType("integer")
                        .HasColumnName("isactive")
                        .HasComment("Признак действующего адресного объекта");

                    b.Property<int?>("Isactual")
                        .HasColumnType("integer")
                        .HasColumnName("isactual")
                        .HasComment("Статус актуальности адресного объекта ФИАС");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level")
                        .HasComment("Уровень адресного объекта");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long?>("Nextid")
                        .HasColumnType("bigint")
                        .HasColumnName("nextid")
                        .HasComment("Идентификатор записи связывания с последующей исторической записью");

                    b.Property<Guid>("Objectguid")
                        .HasColumnType("uuid")
                        .HasColumnName("objectguid")
                        .HasComment("Глобальный уникальный идентификатор адресного объекта типа UUID");

                    b.Property<long>("Objectid")
                        .HasColumnType("bigint")
                        .HasColumnName("objectid")
                        .HasComment("Глобальный уникальный идентификатор адресного объекта типа INTEGER");

                    b.Property<int?>("Opertypeid")
                        .HasColumnType("integer")
                        .HasColumnName("opertypeid")
                        .HasComment("Статус действия над записью – причина появления записи");

                    b.Property<long?>("Previd")
                        .HasColumnType("bigint")
                        .HasColumnName("previd")
                        .HasComment("Идентификатор записи связывания с предыдущей исторической записью");

                    b.Property<DateOnly?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate")
                        .HasComment("Начало действия записи");

                    b.Property<string>("Typename")
                        .HasColumnType("text")
                        .HasColumnName("typename")
                        .HasComment("Краткое наименование типа объекта");

                    b.Property<DateOnly?>("Updatedate")
                        .HasColumnType("date")
                        .HasColumnName("updatedate")
                        .HasComment("Дата внесения (обновления) записи");

                    b.HasKey("Id")
                        .HasName("PK_Addr_Objs");

                    b.ToTable("as_addr_obj", null, t =>
                        {
                            t.HasComment("Сведения классификатора адресообразующих элементов");
                        });
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.AsAdmHierarchy", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор записи. Ключевое поле");

                    b.Property<string>("Areacode")
                        .HasColumnType("text")
                        .HasColumnName("areacode")
                        .HasComment("Код района");

                    b.Property<long?>("Changeid")
                        .HasColumnType("bigint")
                        .HasColumnName("changeid")
                        .HasComment("ID изменившей транзакции");

                    b.Property<string>("Citycode")
                        .HasColumnType("text")
                        .HasColumnName("citycode")
                        .HasComment("Код города");

                    b.Property<DateOnly?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate")
                        .HasComment("Окончание действия записи");

                    b.Property<int?>("Isactive")
                        .HasColumnType("integer")
                        .HasColumnName("isactive")
                        .HasComment("Признак действующего адресного объекта");

                    b.Property<long?>("Nextid")
                        .HasColumnType("bigint")
                        .HasColumnName("nextid")
                        .HasComment("Идентификатор записи связывания с последующей исторической записью");

                    b.Property<long?>("Objectid")
                        .HasColumnType("bigint")
                        .HasColumnName("objectid")
                        .HasComment("Глобальный уникальный идентификатор объекта");

                    b.Property<long?>("Parentobjid")
                        .HasColumnType("bigint")
                        .HasColumnName("parentobjid")
                        .HasComment("Идентификатор родительского объекта");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path")
                        .HasComment("Материализованный путь к объекту (полная иерархия)");

                    b.Property<string>("Placecode")
                        .HasColumnType("text")
                        .HasColumnName("placecode")
                        .HasComment("Код населенного пункта");

                    b.Property<string>("Plancode")
                        .HasColumnType("text")
                        .HasColumnName("plancode")
                        .HasComment("Код ЭПС");

                    b.Property<long?>("Previd")
                        .HasColumnType("bigint")
                        .HasColumnName("previd")
                        .HasComment("Идентификатор записи связывания с предыдущей исторической записью");

                    b.Property<string>("Regioncode")
                        .HasColumnType("text")
                        .HasColumnName("regioncode")
                        .HasComment("Код региона");

                    b.Property<DateOnly?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate")
                        .HasComment("Начало действия записи");

                    b.Property<string>("Streetcode")
                        .HasColumnType("text")
                        .HasColumnName("streetcode")
                        .HasComment("Код улицы");

                    b.Property<DateOnly?>("Updatedate")
                        .HasColumnType("date")
                        .HasColumnName("updatedate")
                        .HasComment("Дата внесения (обновления) записи");

                    b.HasKey("Id")
                        .HasName("PK_Adm_Hier");

                    b.ToTable("as_adm_hierarchy", null, t =>
                        {
                            t.HasComment("Сведения по иерархии в административном делении");
                        });
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.AsHouse", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор записи. Ключевое поле");

                    b.Property<string>("Addnum1")
                        .HasColumnType("text")
                        .HasColumnName("addnum1")
                        .HasComment("Дополнительный номер дома 1");

                    b.Property<string>("Addnum2")
                        .HasColumnType("text")
                        .HasColumnName("addnum2")
                        .HasComment("Дополнительный номер дома 1");

                    b.Property<int?>("Addtype1")
                        .HasColumnType("integer")
                        .HasColumnName("addtype1")
                        .HasComment("Дополнительный тип дома 1");

                    b.Property<int?>("Addtype2")
                        .HasColumnType("integer")
                        .HasColumnName("addtype2")
                        .HasComment("Дополнительный тип дома 2");

                    b.Property<long?>("Changeid")
                        .HasColumnType("bigint")
                        .HasColumnName("changeid")
                        .HasComment("ID изменившей транзакции");

                    b.Property<DateOnly?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate")
                        .HasComment("Окончание действия записи");

                    b.Property<string>("Housenum")
                        .HasColumnType("text")
                        .HasColumnName("housenum")
                        .HasComment("Основной номер дома");

                    b.Property<int?>("Housetype")
                        .HasColumnType("integer")
                        .HasColumnName("housetype")
                        .HasComment("Основной тип дома");

                    b.Property<int?>("Isactive")
                        .HasColumnType("integer")
                        .HasColumnName("isactive")
                        .HasComment("Признак действующего адресного объекта");

                    b.Property<int?>("Isactual")
                        .HasColumnType("integer")
                        .HasColumnName("isactual")
                        .HasComment("Статус актуальности адресного объекта ФИАС");

                    b.Property<long?>("Nextid")
                        .HasColumnType("bigint")
                        .HasColumnName("nextid")
                        .HasComment("Идентификатор записи связывания с последующей исторической записью");

                    b.Property<Guid>("Objectguid")
                        .HasColumnType("uuid")
                        .HasColumnName("objectguid")
                        .HasComment("Глобальный уникальный идентификатор адресного объекта типа UUID");

                    b.Property<long>("Objectid")
                        .HasColumnType("bigint")
                        .HasColumnName("objectid")
                        .HasComment("Глобальный уникальный идентификатор объекта типа INTEGER");

                    b.Property<int?>("Opertypeid")
                        .HasColumnType("integer")
                        .HasColumnName("opertypeid")
                        .HasComment("Статус действия над записью – причина появления записи");

                    b.Property<long?>("Previd")
                        .HasColumnType("bigint")
                        .HasColumnName("previd")
                        .HasComment("Идентификатор записи связывания с предыдущей исторической записью");

                    b.Property<DateOnly?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate")
                        .HasComment("Начало действия записи");

                    b.Property<DateOnly?>("Updatedate")
                        .HasColumnType("date")
                        .HasColumnName("updatedate")
                        .HasComment("Дата внесения (обновления) записи");

                    b.HasKey("Id")
                        .HasName("PK_Houses");

                    b.ToTable("as_houses", null, t =>
                        {
                            t.HasComment("Сведения по номерам домов улиц городов и населенных пунктов");
                        });
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId", "OrderId", "DishId")
                        .IsUnique();

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Address")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<double>("RatingScore")
                        .HasColumnType("double precision");

                    b.HasKey("UserId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Token", b =>
                {
                    b.Property<string>("InvalideToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InvalideToken");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Address")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genders")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Basket", b =>
                {
                    b.HasOne("DeliveryFoodBackend.Data.Models.Dish", "Dish")
                        .WithMany("Baskets")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryFoodBackend.Data.Models.Order", "Order")
                        .WithMany("Baskets")
                        .HasForeignKey("OrderId");

                    b.HasOne("DeliveryFoodBackend.Data.Models.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Order", b =>
                {
                    b.HasOne("DeliveryFoodBackend.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Rating", b =>
                {
                    b.HasOne("DeliveryFoodBackend.Data.Models.Dish", "Dish")
                        .WithMany("Ratings")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeliveryFoodBackend.Data.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Dish", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.Order", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("DeliveryFoodBackend.Data.Models.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
